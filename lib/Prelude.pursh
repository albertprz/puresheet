module Prelude


op || = or R2

op && = and R3

op == = eq L4

op != = notEq L4

op > = gt L4

op >= = gtOrEq L4

op < = lt L4

op >= = ltOrEq L4

op ++ = append R5

op +: = cons R6

op :+ = snoc L7

op + = add L8

op - = sub L9

op * = mult L10

op / = div L11

op % = mod L11

op <| = apply R0

op |> = applyFlipped L1

op <<< = compose R9

op >>> = composeFlipped R9


def id (x) = x

def const (x, y) = x

def apply (f, x) = f (x)

def applyFlipped = flip (apply)

def compose (f, g) = x -> f (g (x))

def composeFlipped = flip (compose)

def flip (f) = (x, y) -> f (y, x)

def map (f, xs) = switch (xs) {
    | []             => []
    | [ xs @ ... , x ] => map (f, xs) :+ f (x)
}

def filter (f, xs) = switch (xs) {
    | []                         => []
    | [ xs @ ... , x ] ? f(x)      => filter (f, xs) :+ x
                     ? otherwise => filter (f, xs)
}

def reduce (f, start, xs) =
    reduceRight (flip (f), start, reverse (xs))

def reduceRight (f, start, xs) = switch (xs) {
    | []             => start
    | [ xs @ ... , x ] => f (x, reduceRight (f, start, xs))
}
